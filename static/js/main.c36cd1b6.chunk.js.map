{"version":3,"sources":["component/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeImage","e","setState","image","URL","createObjectURL","target","files","state","nombre","apellido","correo","cargo","ingreso","handleInput","bind","assertThisInitialized","handleSubmit","_e$target","value","name","defineProperty","preventDefault","props","onAddForm","console","log","_this2","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","Component","App","todos","handleAddform","download","todo","toConsumableArray","concat","formulario","ReactDOM","findDOMNode","refs","domtoimage","toBlob","then","blob","FileSaver","saveAs","map","tareas","i","ref","src","alt","onClick","component_Form","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c36cd1b6.chunk.js","sourcesContent":["/* eslint-disable react/jsx-no-duplicate-props */\r\nimport React, { Component } from 'react';\r\n\r\n\r\nclass Form extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      nombre: \" \",\r\n      apellido: \" \",\r\n      correo: \" \",\r\n      cargo: \" \",\r\n      ingreso: \" \",\r\n      image: null\r\n\r\n    };\r\n    this.handleInput = this.handleInput.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this); \r\n    this.handleChangeImage=this.handleChangeImage.bind(this);\r\n}\r\n\r\n    //funcion de modificacion\r\n   handleInput(e){\r\n    //    console.log(e.target.value, e.target.name)\r\n       const { value, name } = e.target;\r\n       //cambia el dato\r\n       this.setState({\r\n         [name]: value,\r\n         \r\n       })\r\n   }\r\n   \r\n   handleSubmit(e){\r\n    e.preventDefault();\r\n    this.props.onAddForm(this.state);\r\n    console.log('enviando data');\r\n   }\r\n   handleChangeImage = (e) => {\r\n    this.setState({image: URL.createObjectURL(e.target.files[0])});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n     \r\n        <form className=\"card-body\" onSubmit={this.handleSubmit}>\r\n        CREA TU FOTOCHECK\r\n            <div className=\"form-group\">\r\n           \r\n            <input\r\n            type=\"text\"\r\n            name=\"nombre\"\r\n            className=\"form-control\"\r\n            placeholder=\"nombre\"\r\n            onChange={this.handleInput}\r\n            >\r\n            </input>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n            <input\r\n            type=\"text\"\r\n            name=\"apellido\"\r\n            className=\"form-control\"\r\n            placeholder=\"apellido\"\r\n            onChange={this.handleInput}\r\n            >\r\n            </input>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n            <input\r\n            type=\"text\"\r\n            name=\"correo\"\r\n            className=\"form-control\"\r\n            placeholder=\"correo\"\r\n            onChange={this.handleInput}\r\n            >\r\n            </input>\r\n            </div>\r\n            \r\n            <div className=\"form-group\">\r\n            <select\r\n            name=\"cargo\"\r\n            className=\"form-control\"\r\n            placeholder=\"cargo\"\r\n            onChange={this.handleInput}\r\n            >\r\n            <option>Analista Funcional</option>\r\n            <option>Gerente</option>\r\n            </select>\r\n            </div>\r\n\r\n\r\n            <div className=\"form-group\">\r\n            Fecha de ingreso : \r\n            <input \r\n            type=\"date\" \r\n            name=\"ingreso\"\r\n            onChange={this.handleInput}\r\n            >\r\n            </input>\r\n            </div>\r\n\r\n            <div className=\"form-group  \">\r\n            <input \r\n            type=\"file\" \r\n            onChange={e => this.handleChangeImage(e)}>\r\n            </input>\r\n            </div>\r\n           \r\n            <button className=\"btn btn-primary\">Vista previa</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Form;","/* eslint-disable no-undef */\n/* eslint-disable jsx-a11y/img-redundant-alt */\n/* eslint-disable jsx-a11y/alt-text */\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport { todos } from \"./todos.json\";\nimport Form from \"./component/Form\";\nimport domtoimage from 'dom-to-image';\nimport ReactDOM from 'react-dom';\nimport FileSaver from 'file-saver';\n\n//class para nombrar un componente y className para css\nclass App extends Component {\n  //constructor almacena datos, ni bien inicializamos un constructor\n  //debemos inicializar super(); para q se traiga toda la configuracion de react\n  constructor() {\n    //para heredar funcionalidad de react\n    super();\n    //estado\n    this.state = {\n      todos\n\n    };\n    this.handleAddform = this.handleAddform.bind(this);\n    this.download= this.download.bind(this);\n  }\n\n    handleAddform(todo) {\n      this.setState({\n        todos: [...this.state.todos, todo]\n      })\n      console.log(todo)\n      \n    }\n    download(){\n      let formulario = ReactDOM.findDOMNode(this.refs['formulario']);\n      domtoimage.toBlob(formulario)\n    .then(function (blob) {\n      FileSaver.saveAs(blob, 'picture.png');\n    });\n    } \n  render() {\n\n   const todo = this.state.todos.map((tareas, i) => {\n      return (\n      \n      <div ref= {'formulario'} className=\"col-md-10\">\n        <div className=\"card\" >\n      <div className=\"card-header\">\n       <h1> DIVEMOTOR </h1>\n        </div>\n        <div className=\"card-body\">\n        <p>{tareas.nombre} </p>\n        <p>{tareas.apellido}</p>\n        <p>{tareas.correo} </p>\n        <p>{tareas.cargo} </p>\n        <p>{tareas.ingreso} </p>\n        \n        <p> <img src={tareas.image} alt=\" \" className=\"img-thumbnail  width: 100% \"/>\n        \n</p>\n         <button onClick={this.download}> DESCARGAR </button>\n        </div>\n        \n      </div>\n      </div>\n      )\n      \n      \n    });\n    return (\n      <div className=\"App\">\n        \n        <div className=\"container \">\n        \n          <div className=\"row \">\n          \n          <Form onAddForm={this.handleAddform}/>\n          <div  className=\"col-md-8\">\n      { todo }\n      </div>\n          \n          </div>\n        </div>\n        <header>\n          \n         \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}